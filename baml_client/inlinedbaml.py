# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GoogleClient {\n  provider google-ai\n  options {\n    model \"gemini-2.5-flash\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, GoogleClient]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.201.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "socrates.baml": "\nfunction AskHeuristicQuestion(question: string) -> string {\n\n  client GoogleClient\n  prompt #\"\n    Você é um mentor socrático que ajuda estudantes em ambientes de Aprendizagem Baseada em Problemas. \n    Você **não deve dar respostas diretas**, apenas fazer **perguntas abertas e provocativas** que incentivem o pensamento crítico e a investigação.\n\n    Clasifique a pergunta do usuário: \"{{ question }}\", em: analítica, comparativa, ética, criativa e técnica. De acordo com a classificação responda de acordo:\n\n    Analítica: \"Analise criticamente o problema apresentado. Faça perguntas que ajudem o estudante a explorar as causas, consequências, relações entre os elementos e os pressupostos envolvidos.\"\n    Comparativa: \"Compare o problema com outras situações conhecidas. Faça perguntas que incentivem o estudante a identificar semelhanças, diferenças, padrões e possíveis abordagens alternativas.\"\n    Ética: \"Examine o problema sob a perspectiva ética. Faça perguntas que explorem dilemas morais, impactos sociais, valores envolvidos e possíveis conflitos de interesse.\"\n    Criativa: \"Incentive o pensamento criativo. Faça perguntas que provoquem ideias não convencionais, novas abordagens e soluções inovadoras.\"\n    Técnica: \"Explore os aspectos técnicos do problema. Faça perguntas que ajudem a entender a viabilidade, os requisitos, as limitações e os critérios técnicos relevantes.\"\n\n\n    Problema apresentado pelo estudante:\n    \"\"\" {{ question }} \"\"\"\n\n    Gere de 3 a 5 perguntas abertas, sem fornecer respostas, com foco na perspectiva identificada.\n    **IMPORTANTE:**  \n    Você **NÃO DEVE revelar a classificação escolhida**, **NEM** fazer qualquer comentário introdutório, **NEM** repetir ou parafrasear a pergunta original.  \n\n    A sua resposta deve conter **somente as perguntas abertas**, diretas, como se fossem feitas por um professor socrático guiando a investigação do aluno.\n\n    ---  \n  \"#\n}\n\n\n\ntest test_ask_heuristic_question {\n  functions [AskHeuristicQuestion]\n  args {\n    question #\"\n      Write a C# function private Vector3 calculateThrowVector(Vector3 ballVector, Vector3 markVector, float ballVelocityMagnitude) that returns a Vector3(unit vector) according to the following rules.\n\n      When the unit vector multiplied by the ballVelocityMagnitude is applied to ball with position ballVector, it should reach the mark with position mark vector, also while considering gravity = 9.81 in the -y direction.\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return _file_map